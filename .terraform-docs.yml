formatter: '' # this is required

version: ''

header-from: main.tf
footer-from: ''

recursive:
  enabled: false
  path: modules

sections:
  hide: []
  show: []

content: |-
  # Elestio RabbitMQ Cluster Terraform module

  Using this module, you can easily and quickly deploy with **Terraform** a **RabbitMQ Cluster** on **Elestio** that is configured correctly and **ready to use**, without spending a lot of time on manual configuration.

  {{ .Header }}
  ## Module requirements

  - 1 Elestio account https://dash.elest.io/signup
  - 1 API key https://dash.elest.io/account/security
  - 1 SSH public/private key (see how to create one [here](https://registry.terraform.io/providers/elestio/elestio/latest/docs/guides/ssh_keys))

  ## Usage

  This is a minimal example of how to use the module:

  ```hcl
  {{ include "examples/doc/usage.tf" }}
  ```

  Keep your rabbitmq password safe, you will need it to access the admin panel.

  If you want to know more about node configuration, check the rabbitmq service documentation [here](https://registry.terraform.io/providers/elestio/elestio/latest/docs/resources/rabbitmq).

  If you want to choose your own provider, datacenter or server type, check the guide [here](https://registry.terraform.io/providers/elestio/elestio/latest/docs/guides/providers_datacenters_server_types).

  If you want to generated a valid SSH Key, check the guide [here](https://registry.terraform.io/providers/elestio/elestio/latest/docs/guides/ssh_keys).

  If you add more nodes, you may attains the resources limit of your account, please visit your account [quota page](https://dash.elest.io/account/add-quota).

  ## Quick configuration

  The following example will create a RabbitMQ cluster with 2 nodes.

  You may need to adjust the configuration to fit your needs.

  Create a `main.tf` file at the root of your project, and fill it with your Elestio credentials:

  ```hcl
  {{ include "examples/doc/init.tf" }}
  ```

  Now you can use the module to create rabbitmq nodes:

  ```hcl
  {{ include "examples/doc/module.tf" }}
  ```

  To get a valid random rabbitmq password, you can use the url https://api.elest.io/api/auth/passwordgenerator

  ```bash
  $ curl -s https://api.elest.io/api/auth/passwordgenerator
  {"status":"OK","password":"631OLUxE-TtXB-H0pGYj3V"}
  ```

  For the `erlang_cookie`, any secret string of your choice will work.

  Finally, let's add some outputs to retrieve useful information:

  ```hcl
  {{ include "examples/doc/outputs.tf" }}
  ```

  You can now run `terraform init` and `terraform apply` to create your RabbitMQ cluster.
  After a few minutes, the cluster will be ready to use.
  You can access your outputs with `terraform output`:

  ```bash
  $ terraform output nodes_admins
  ```

  If you want to update some parameters, you can edit the `main.tf` file and run `terraform apply` again.
  Terraform will automatically update the cluster to match the new configuration.
  Please note that changing the node count requires to change the .env of existing nodes. This is done automatically by the module.

  ## Ready-to-deploy example

  We created a RabbitMQ ready-to-deploy cluster example which creates the same infrastructure as the previous example.
  You can find it [here](https://github.com/elestio-examples/terraform-elestio-rabbitmq-cluster/tree/main/examples/get_started).
  Follow the instructions to deploy the example.

  ## How to use the cluster

  Many clients support lists of hostnames that will be tried in order at connection time.

  But if you need a manual workaround, you can add a load balancer in front of your nodes.
  If you want the load balancer to be managed by Elestio, add the following code to your `main.tf` file:

  ```hcl
  {{ include "examples/doc/load_balancer.tf" }}
  ```

  Use the following command to get the connection string:

  ```bash
  $ terraform output connection_string
  ```

  You can now use the connection string like this:

  ```js
  {{ include "examples/doc/index.js" }}
  ```

  {{ .Footer }}
  {{ .Inputs }}
  {{ .Modules }}
  {{ .Outputs }}
  {{ .Providers }}
  {{ .Requirements }}
  {{ .Resources }}

output:
  file: ''
  mode: inject
  template: |-
    <!-- BEGIN_TF_DOCS -->
    {{ .Content }}
    <!-- END_TF_DOCS -->

output-values:
  enabled: false
  from: ''

sort:
  enabled: true
  by: name

settings:
  anchor: true
  color: true
  default: true
  description: false
  escape: true
  hide-empty: false
  html: true
  indent: 2
  lockfile: true
  read-comments: true
  required: true
  sensitive: true
  type: true
